#ifndef HalfEdgeMesh_H_
#define HalfEdgeMesh_H_
//----------------------------------------------------------------------------------------------------------------------
/// @file HalfEdgeMesh.h
/// @brief basic halfedge data structure
//----------------------------------------------------------------------------------------------------------------------
// must include types.h first for ngl::Real and GLEW if required
#include <ngl/Types.h>
#include <vector>
#include <queue>
#include <list>
#include <string>
#include <memory>
#include <ngl/Vec3.h>
#include <ngl/Vec4.h>
#include <ngl/BBox.h>
#include <ngl/Obj.h>
#include <ngl/VertexArrayObject.h>
#include <cmath>

#define pi 3.1415926
//----------------------------------------------------------------------------------------------------------------------
/// @class HalfEdgeMesh "include/HalfEdgeMesh.h"
/// @brief basic structure for HalfEdge
/// @author Xiaosong Yang
/// @version 1.0
/// @date 11/01/13
//----------------------------------------------------------------------------------------------------------------------
struct HE_FACE;

typedef struct HALFEDGE {
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief reference to the vertex this halfedge pointed to, index into the vert list
    //----------------------------------------------------------------------------------------------------------------------
    unsigned            m_toVertex;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief reference to the face it belongs to
    //----------------------------------------------------------------------------------------------------------------------
    struct HE_FACE      *m_face;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief reference to the next halfedge in the same face
    //----------------------------------------------------------------------------------------------------------------------
    struct HALFEDGE     *m_next;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief reference to opposite halfedgem_verts[oneRingNeigh[next]].m_vert - itr->m_vert)
    //----------------------------------------------------------------------------------------------------------------------
    struct HALFEDGE     *m_dual;
} HalfEdge;

typedef struct HE_VERTEX{
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief reference one outgoing halfedge
    //----------------------------------------------------------------------------------------------------------------------
    HalfEdge    *m_outHalfEdge;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief vertex coordinate
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3   m_vert;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief vertex normal
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3   m_norm;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief vertex curvature
    //----------------------------------------------------------------------------------------------------------------------
    float   m_curvature;
    /// @brief Map curvature to color
    ngl::Vec3   m_color;
} HE_Vertex;

typedef struct HE_FACE {
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief reference one halfedge bounding it
    //----------------------------------------------------------------------------------------------------------------------
    HalfEdge    *m_halfEdge;
    /// @brief flag for parsing
    bool        flag;
} HE_Face;



// a simple structure to hold our vertex data
// had to move this outside the method as g++ complains about it
// clang doesn't have a problem tho
struct VertData
{
  GLfloat nx; // normal from obj mesh
  GLfloat ny;
  GLfloat nz;
  GLfloat x; // position from obj
  GLfloat y;
  GLfloat z;
  GLfloat r;
  GLfloat g;
  GLfloat b;
};

class HalfEdgeMesh
{
public :

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief default constructor
    //----------------------------------------------------------------------------------------------------------------------
    HalfEdgeMesh(): m_vao(false){;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  constructor to load an objMesh as a parameter
    /// @param[in]  &_objMesh obj mesh
    //----------------------------------------------------------------------------------------------------------------------
    HalfEdgeMesh(ngl::Obj *_objMesh);

    /// destructor
    ~HalfEdgeMesh();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to draw the bounding box
    //----------------------------------------------------------------------------------------------------------------------
    void drawBBox() const;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw method to draw the obj as a VBO. The VBO first needs to be created using the CreateVBO method
    //----------------------------------------------------------------------------------------------------------------------
    void draw() const;

    //----------------------------------------------------------------------------------------------------------------------
    void createVAO();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a method to get the current bounding box of the mesh
    /// @returns the bounding box for the loaded mesh;
    //----------------------------------------------------------------------------------------------------------------------
    inline ngl::BBox &getBBox(){return *m_ext;}

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to get the number of vertices in the object
    //----------------------------------------------------------------------------------------------------------------------
    inline unsigned long int getNumVerts() const {return m_nVerts;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accesor to get the center
    //----------------------------------------------------------------------------------------------------------------------
    inline ngl::Vec3 getCenter() const {return m_center;}

    /// @brief free all the memory allocated for Maintaining the HalfEdge Data Structure
    void deleteHalfEdgeDataStructure();

    /// @brief compute the normal of each vertex
    void computeVertexNormal();

    /// @brief compute curvature following Gauss-Bonnet Scheme
    void computeGaussianCurvature();
    void computeMeanCurvature();

    /// @brief compute area of first ring neightbour
    float computeFirstRingArea(unsigned int _indexOfVertex);

    /// @brief Mapping curvature to color
    void mapCurvaturetoColor();

    /// @brief find one ring neighbour
    std::vector<unsigned int> findOneRingNeighbours(unsigned int _indexOfVertex);

protected :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The number of vertices in the object
    //----------------------------------------------------------------------------------------------------------------------
    unsigned long int m_nVerts;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The array of all the vertices datavertex
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<HE_Vertex> m_verts;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Center of the object
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_center;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief buffers for the VBO in order Vert, Tex, Norm
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_vboBuffers;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief id for our vertexArray object
    //----------------------------------------------------------------------------------------------------------------------
    ngl::VertexArrayObject *m_vaoMesh;
    unsigned int m_meshSize;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if a VBO has been created
    //----------------------------------------------------------------------------------------------------------------------
    bool m_vbo;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if a VBO has been created
    //----------------------------------------------------------------------------------------------------------------------
    bool m_vao;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief   Create a bounding box of the object to store it's extents
    //----------------------------------------------------------------------------------------------------------------------
    ngl::BBox *m_ext;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  determines if the data is Packed as either TRI or QUAD
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_dataPackType;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the size of the buffer pack we use this for the saving of bin vbo
    /// but it actually holds the size of the data (3 for just verts 5 verts norms etc)
    //----------------------------------------------------------------------------------------------------------------------
    int  m_bufferPackSize;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  which type of VBO are we going to draw
    //----------------------------------------------------------------------------------------------------------------------
    GLenum m_vboDrawType;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  flag to indicate if anything loaded for dtor
    //----------------------------------------------------------------------------------------------------------------------
    bool m_loaded;
};

#endif
//----------------------------------------------------------------------------------------------------------------------

