Workshop 5: Cage based deformation with Mean Value Coordinates
--------------------------------------------------------------
In this complicated example, we will compute cage based deformation on the shader. Each vertex
in our geometry is represented using barycentric coordinates - this means that each vertex is
represented by weights associated with the surrounding cage vertices. Deformation is generated by
changing the coordinates of the cage vertices, and the vertices are computed as a weighted sum
of these vertices.

The process of computing the weights is given in the function in mvc.cpp. Ifyou want to know more,
take a look at Mean Value Coordinates for Arbitrary Planar Polygons by Kai Hormann and Michael Floater.

In my shader implementation of this effect, I stored the barycentric coordinates for each vertex in
an appropriately sized buffer object (in glsl, this is a samplerBuffer). The cage vertex coordinates
are also stored in sampler buffers, but are changed frequently on the client side when they change.
I didn't have time to implement mouse interaction, so I've simply implemented a "wobbleCage" function
to do the deformation.

All the data handling is done for you, as I found generating the meshes and cage data quite
difficult. I may provide the utilities I wrote to do generate these at some point.

You will have to write the mvc.vs shader, which computes the position of the vertices based on
the cage coordinates. This will require texture lookups into the samplerBuffers. Also, you will
need to write the function createWeights (in mvcdeform.cpp), which will compute the mvc weights
and write these to a buffer and bind it to a texture.

Advanced: Implement mouse input so you can specify an arbitrary cage and deform these handles.
For the truly hardcore, you can extend this to 3D! Take a look at this.
http://dl.acm.org/citation.cfm?id=1073229

In summary:
- Complete the mvc.vs shader to compute the deformed vertex positions.
- Write the MVCDeform::createWeights() as describe above.
- Advanced: Mouse input, extend to 3D (hardcore).

Your intended learning outcomes:
- Vertex instancing example
- Cage based deformation with barycentric coordinates

-----------------
Richard Southern (rsouthern@bournemouth.ac.uk)
October 2012
