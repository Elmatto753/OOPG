#ifndef MACHINGCUBE_H_
#define MACHINGCUBE_H_
//----------------------------------------------------------------------------------------------------------------------
/// @file MachineCube.h
/// @brief basic maching cube algorithm
//----------------------------------------------------------------------------------------------------------------------
// must include types.h first for ngl::Real and GLEW if required
#include <ngl/Types.h>
#include <vector>
#include <list>
#include <iostream>
#include <fstream>
#include <string>
#include <memory>
#include <ngl/Vec3.h>
#include <ngl/Vec4.h>
#include <ngl/VertexArrayObject.h>
#include <cmath>

//----------------------------------------------------------------------------------------------------------------------
/// @class MachingCube "include/MachingCube.h"
/// @brief basic maching cube algorithm
/// @author Xiaosong Yang
/// @version 1.0
/// @date 14/01/13
//----------------------------------------------------------------------------------------------------------------------

// a simple structure to hold our vertex data
// had to move this outside the method as g++ complains about it
// clang doesn't have a problem tho
struct VertData
{
  GLfloat nx; // normal from obj mesh
  GLfloat ny;
  GLfloat nz;
  GLfloat x; // position from obj
  GLfloat y;
  GLfloat z;
};

// code from http://paulbourke.net/geometry/polygonise/

typedef struct {
   ngl::Vec3    p[8];
   float        val[8];
} Voxel;

typedef struct {
    ngl::Vec3    p[3];         /* Vertices */
} Triangle;

// code finished

class MachingCube
{
public :

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief default constructor
    //----------------------------------------------------------------------------------------------------------------------
    MachingCube();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  load an volume data from a file
    /// @param[in]  &_vol Volume Data File name
    //----------------------------------------------------------------------------------------------------------------------
    bool LoadVolumeFromFile(std::string _vol);
    void generateVolume();
    ~MachingCube();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw method to draw the maching cube mesh as a VBO. The VBO first needs to be created using the CreateVAO method
    //----------------------------------------------------------------------------------------------------------------------
    void draw() const;

    //----------------------------------------------------------------------------------------------------------------------
    void createVAO();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief extract triangles from each voxel, add the triangles into tri vector
    //----------------------------------------------------------------------------------------------------------------------
    unsigned int MachingTriangles(Voxel g, float iso, std::vector<Triangle> &triList);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief intepolate the intersection point from the level value
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 VertexInterp(float isolevel, ngl::Vec3 p1, ngl::Vec3 p2, float valp1, float valp2);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief compute the normal from the three vertices
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 computeTriangleNormal(Triangle &itr);


protected :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The volume data
    //----------------------------------------------------------------------------------------------------------------------
    float           *volumeData;
    float           isolevel;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The volume data dimension
    //----------------------------------------------------------------------------------------------------------------------
    unsigned int    volume_width;
    unsigned int    volume_height;
    unsigned int    volume_depth;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The number of vertices in the object
    //----------------------------------------------------------------------------------------------------------------------
    unsigned long int m_nVerts;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The array of all the vertices datavertex
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<VertData> m_verts;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief buffers for the VBO in order Vert, Tex, Norm
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_vboBuffers;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief id for our vertexArray object
    //----------------------------------------------------------------------------------------------------------------------
    ngl::VertexArrayObject *m_vaoMesh;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if a VBO has been created
    //----------------------------------------------------------------------------------------------------------------------
    bool m_vbo;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if a VBO has been created
    //----------------------------------------------------------------------------------------------------------------------
    bool m_vao;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the size of the buffer pack we use this for the saving of bin vbo
    /// but it actually holds the size of the data (3 for just verts 5 verts norms etc)
    //----------------------------------------------------------------------------------------------------------------------
    int  m_bufferPackSize;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  which type of VBO are we going to draw
    //----------------------------------------------------------------------------------------------------------------------
    GLenum m_vboDrawType;
};

#endif
//----------------------------------------------------------------------------------------------------------------------

